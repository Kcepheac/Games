import pygame
import sys
import random
import time
from typing import List, Dict, Tuple, Optional

# Initialize pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH, SCREEN_HEIGHT = 1000, 700
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Go Fish Card Game")

# Colors
BACKGROUND = (10, 50, 80)  # Deep ocean blue
TABLE_COLOR = (20, 100, 60)  # Green felt table
CARD_BACK_COLOR = (180, 30, 30)  # Red card backs
HIGHLIGHT_COLOR = (255, 255, 100, 150)  # Yellow highlight
TEXT_COLOR = (240, 240, 240)  # Light text
UI_BG = (30, 70, 100, 200)  # Semi-transparent UI background
UI_BORDER = (70, 150, 200)  # Light blue border
BUTTON_COLOR = (50, 150, 200)  # Blue button
BUTTON_HOVER = (70, 180, 230)  # Lighter blue hover

# Fonts
FONT_SM = pygame.font.SysFont(None, 24)
FONT_MD = pygame.font.SysFont(None, 32)
FONT_LG = pygame.font.SysFont(None, 48)
FONT_XL = pygame.font.SysFont(None, 64)

# Card dimensions
CARD_WIDTH, CARD_HEIGHT = 80, 120
CARD_RADIUS = 8
CARD_SPACING = 20

# Card suits and ranks
SUITS = ["Hearts", "Diamonds", "Clubs", "Spades"]
RANKS = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
RANK_NAMES = {
    "2": "Two", "3": "Three", "4": "Four", "5": "Five", 
    "6": "Six", "7": "Seven", "8": "Eight", "9": "Nine", 
    "10": "Ten", "J": "Jack", "Q": "Queen", "K": "King", "A": "Ace"
}

class Card:
    def __init__(self, suit: str, rank: str):
        self.suit = suit
        self.rank = rank
        self.face_up = False
        self.x, self.y = 0, 0
        self.target_x, self.target_y = 0, 0
        self.animation_speed = 0.2
        self.highlight = False
        self.visible = True
    
    def __str__(self):
        return f"{RANK_NAMES[self.rank]} of {self.suit}"
    
    def draw(self, surface, x: int, y: int, is_hand: bool = False):
        if not self.visible:
            return
            
        # Animate card movement
        if (self.x, self.y) != (self.target_x, self.target_y):
            dx = self.target_x - self.x
            dy = self.target_y - self.y
            self.x += dx * self.animation_speed
            self.y += dy * self.animation_speed
        else:
            self.x, self.y = x, y
        
        # Draw card background
        if self.face_up:
            color = (240, 240, 240)  # White card face
            pygame.draw.rect(surface, color, (self.x, self.y, CARD_WIDTH, CARD_HEIGHT), 
                            border_radius=CARD_RADIUS)
            
            # Draw card suit and rank
            if self.suit in ["Hearts", "Diamonds"]:
                text_color = (200, 30, 30)  # Red
            else:
                text_color = (30, 30, 30)  # Black
            
            # Draw rank in top-left
            rank_text = FONT_SM.render(self.rank, True, text_color)
            surface.blit(rank_text, (self.x + 8, self.y + 8))
            
            # Draw suit symbol
            suit_symbol = ""
            if self.suit == "Hearts":
                suit_symbol = "♥"
            elif self.suit == "Diamonds":
                suit_symbol = "♦"
            elif self.suit == "Clubs":
                suit_symbol = "♣"
            elif self.suit == "Spades":
                suit_symbol = "♠"
                
            suit_text = FONT_LG.render(suit_symbol, True, text_color)
            surface.blit(suit_text, (self.x + CARD_WIDTH//2 - suit_text.get_width()//2, 
                                    self.y + CARD_HEIGHT//2 - suit_text.get_height()//2))
            
            # Draw rank in bottom-right
            rotated_rank = pygame.transform.rotate(rank_text, 180)
            surface.blit(rotated_rank, (self.x + CARD_WIDTH - rotated_rank.get_width() - 8, 
                                       self.y + CARD_HEIGHT - rotated_rank.get_height() - 8))
        else:
            # Draw card back
            pygame.draw.rect(surface, CARD_BACK_COLOR, (self.x, self.y, CARD_WIDTH, CARD_HEIGHT), 
                            border_radius=CARD_RADIUS)
            
            # Draw card back pattern
            pattern_color = (150, 20, 20)
            pygame.draw.rect(surface, pattern_color, (self.x + 10, self.y + 10, 
                                                     CARD_WIDTH - 20, CARD_HEIGHT - 20), 
                            2, border_radius=CARD_RADIUS//2)
            pygame.draw.circle(surface, pattern_color, 
                             (self.x + CARD_WIDTH//2, self.y + CARD_HEIGHT//2), 
                             CARD_WIDTH//4)
        
        # Draw card border
        border_color = (200, 200, 200) if self.face_up else (30, 30, 30)
        pygame.draw.rect(surface, border_color, (self.x, self.y, CARD_WIDTH, CARD_HEIGHT), 
                         2, border_radius=CARD_RADIUS)
        
        # Draw highlight
        if self.highlight and is_hand:
            highlight_surf = pygame.Surface((CARD_WIDTH, CARD_HEIGHT), pygame.SRCALPHA)
            pygame.draw.rect(highlight_surf, HIGHLIGHT_COLOR, (0, 0, CARD_WIDTH, CARD_HEIGHT),
                            border_radius=CARD_RADIUS)
            surface.blit(highlight_surf, (self.x, self.y))

class Player:
    def __init__(self, name: str, is_ai: bool = False):
        self.name = name
        self.is_ai = is_ai
        self.hand: List[Card] = []
        self.books: List[str] = []  # Completed sets of 4 cards of same rank
        self.score = 0
        self.target = None
        self.target_rank = None
        self.message = ""
        self.message_timer = 0
    
    def has_rank(self, rank: str) -> bool:
        """Check if player has any cards of a specific rank"""
        return any(card.rank == rank for card in self.hand)
    
    def get_books_in_hand(self) -> List[str]:
        """Check for completed books in hand"""
        rank_counts = {}
        for card in self.hand:
            rank_counts[card.rank] = rank_counts.get(card.rank, 0) + 1
        
        return [rank for rank, count in rank_counts.items() if count == 4]
    
    def remove_rank(self, rank: str) -> List[Card]:
        """Remove all cards of a specific rank from hand"""
        removed_cards = [card for card in self.hand if card.rank == rank]
        self.hand = [card for card in self.hand if card.rank != rank]
        return removed_cards
    
    def add_cards(self, cards: List[Card]):
        """Add cards to hand"""
        self.hand.extend(cards)
    
    def draw_card(self, deck: List[Card]) -> Optional[Card]:
        """Draw a card from the deck"""
        if deck:
            card = deck.pop()
            self.hand.append(card)
            return card
        return None
    
    def check_and_remove_books(self):
        """Check for completed books and remove them from hand"""
        books = self.get_books_in_hand()
        for book_rank in books:
            self.remove_rank(book_rank)
            self.books.append(book_rank)
            self.score += 1
            self.message = f"{self.name} made a book of {RANK_NAMES[book_rank]}s!"
            self.message_timer = 120
        return len(books) > 0
    
    def ai_select_target(self, players: List['Player'], current_player_index: int) -> Tuple[int, str]:
        """AI logic to select a target player and rank to ask for"""
        # Find other players
        other_players = [p for i, p in enumerate(players) 
                         if i != current_player_index and p != self]
        
        # Select a random player to ask
        target_player = random.choice(other_players)
        
        # Find a rank that we have at least one of
        possible_ranks = list(set(card.rank for card in self.hand))
        if not possible_ranks:
            return None, None
            
        # Prefer ranks we have more of
        rank_counts = {rank: sum(1 for card in self.hand if card.rank == rank) 
                      for rank in possible_ranks}
        selected_rank = max(possible_ranks, key=lambda r: rank_counts[r])
        
        return players.index(target_player), selected_rank

class GoFishGame:
    def __init__(self):
        self.players: List[Player] = [
            Player("You", False),
            Player("Alex", True),
            Player("Sam", True),
            Player("Taylor", True)
        ]
        self.deck: List[Card] = []
        self.current_player_index = 0
        self.game_state = "setup"  # setup, playing, game_over
        self.message = "Welcome to Go Fish!"
        self.message_timer = 180
        self.selected_rank = None
        self.selected_target = 1
        self.initialize_deck()
        
    def initialize_deck(self):
        # Create a standard deck of 52 cards
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit, rank))
        self.shuffle_deck()
    
    def shuffle_deck(self):
        random.shuffle(self.deck)
    
    def deal_cards(self):
        # Deal cards to players (5 cards each for 4 players, 7 for 2 players)
        cards_per_player = 5 if len(self.players) > 2 else 7
        
        for player in self.players:
            for _ in range(cards_per_player):
                player.draw_card(self.deck)
    
    def start_game(self):
        self.deal_cards()
        self.game_state = "playing"
        self.message = "Game started! Your turn."
        self.message_timer = 180
        self.position_cards()
        
        # Check for initial books
        for player in self.players:
            player.check_and_remove_books()
    
    def position_cards(self):
        # Position human player cards
        player = self.players[0]
        hand_width = min(len(player.hand) * (CARD_WIDTH // 3), SCREEN_WIDTH - 200)
        start_x = (SCREEN_WIDTH - hand_width) // 2
        
        for i, card in enumerate(player.hand):
            card.target_x = start_x + i * (CARD_WIDTH // 3)
            card.target_y = SCREEN_HEIGHT - CARD_HEIGHT - 20
            card.face_up = True
        
        # Position AI player cards
        for idx, player in enumerate(self.players[1:], 1):
            # AI cards are face down except when they're being asked for a card
            for card in player.hand:
                card.face_up = False
                card.target_x = 100 if idx == 1 else SCREEN_WIDTH - 100 - CARD_WIDTH
                card.target_y = 150 if idx in [1, 3] else 50
    
    def next_player(self):
        self.current_player_index = (self.current_player_index + 1) % len(self.players)
        player = self.players[self.current_player_index]
        
        # AI players take their turn immediately
        if player.is_ai and self.game_state == "playing":
            self.message = f"{player.name}'s turn"
            self.message_timer = 90
            pygame.display.flip()
            time.sleep(1)  # Pause so player can see whose turn it is
            self.ai_turn()
    
    def player_turn(self, target_index: int, rank: str):
        if self.game_state != "playing":
            return
            
        current_player = self.players[self.current_player_index]
        target_player = self.players[target_index]
        
        # Check if player has the requested rank
        if target_player.has_rank(rank):
            # Transfer cards
            cards = target_player.remove_rank(rank)
            current_player.add_cards(cards)
            self.message = f"{target_player.name} gave {current_player.name} {len(cards)} {RANK_NAMES[rank]}{'s' if len(cards) > 1 else ''}"
            self.message_timer = 120
            
            # Check for books
            if current_player.check_and_remove_books():
                # Player gets another turn if they make a book
                self.position_cards()
                return
        else:
            # Go Fish!
            self.message = f"{target_player.name} says 'Go Fish!'"
            self.message_timer = 120
            
            # Draw a card
            drawn_card = current_player.draw_card(self.deck)
            if drawn_card:
                drawn_card.face_up = True
                self.position_cards()
                
                # Check if the drawn card matches the requested rank
                if drawn_card.rank == rank:
                    self.message = f"{current_player.name} fished the {RANK_NAMES[rank]} they wanted!"
                    self.message_timer = 120
                    
                    # Player gets another turn
                    return
        
        # Move to next player
        self.next_player()
    
    def ai_turn(self):
        current_player = self.players[self.current_player_index]
        target_index, rank = current_player.ai_select_target(self.players, self.current_player_index)
        
        if target_index is None or rank is None:
            self.next_player()
            return
            
        # Temporarily show AI's hand
        for card in current_player.hand:
            card.face_up = True
        self.position_cards()
        pygame.display.flip()
        time.sleep(0.5)  # Brief pause so player can see
        
        # Perform the turn
        self.player_turn(target_index, rank)
        
        # Hide AI's hand again
        for card in current_player.hand:
            card.face_up = False
        self.position_cards()
    
    def check_game_over(self):
        # Game ends when all books are completed (13 possible)
        total_books = sum(len(player.books) for player in self.players)
        if total_books == 13:
            self.game_state = "game_over"
            winner = max(self.players, key=lambda p: p.score)
            self.message = f"{winner.name} wins with {winner.score} books!"
            self.message_timer = 300
            return True
        return False
    
    def update(self):
        # Update message timer
        if self.message_timer > 0:
            self.message_timer -= 1
        
        # Position cards
        self.position_cards()
        
        # Check for game over
        self.check_game_over()
    
    def draw(self, surface):
        # Draw background
        surface.fill(BACKGROUND)
        
        # Draw table
        pygame.draw.rect(surface, TABLE_COLOR, (50, 50, SCREEN_WIDTH-100, SCREEN_HEIGHT-100), 
                         border_radius=20)
        pygame.draw.rect(surface, (30, 80, 50), (50, 50, SCREEN_WIDTH-100, SCREEN_HEIGHT-100), 
                         3, border_radius=20)
        
        # Draw game title
        title = FONT_XL.render("Go Fish", True, TEXT_COLOR)
        surface.blit(title, (SCREEN_WIDTH // 2 - title.get_width() // 2, 20))
        
        # Draw deck
        if self.deck:
            deck_x = SCREEN_WIDTH // 2 - CARD_WIDTH // 2
            deck_y = SCREEN_HEIGHT // 2 - CARD_HEIGHT // 2
            
            # Draw multiple cards to show a deck
            for i in range(min(5, len(self.deck))):
                offset = i * 2
                card = Card("", "")  # Dummy card for back
                card.face_up = False
                card.x = deck_x + offset
                card.y = deck_y + offset
                card.draw(surface, deck_x + offset, deck_y + offset)
            
            deck_text = FONT_SM.render(f"Deck: {len(self.deck)} cards", True, TEXT_COLOR)
            surface.blit(deck_text, (deck_x + CARD_WIDTH // 2 - deck_text.get_width() // 2, 
                                   deck_y + CARD_HEIGHT + 10))
        
        # Draw player hands
        for i, player in enumerate(self.players):
            if i == 0:  # Human player
                for card in player.hand:
                    card.draw(surface, card.x, card.y, True)
            else:  # AI players
                # Draw card backs for AI players
                hand_size = len(player.hand)
                start_x = 100 if i == 1 else SCREEN_WIDTH - 100 - CARD_WIDTH
                start_y = 150 if i in [1, 3] else 50
                
                for j in range(min(5, hand_size)):
                    offset = j * 10
                    y_offset = j * 3 if i in [1, 3] else -j * 3
                    
                    card = Card("", "")  # Dummy card for back
                    card.face_up = False
                    card.x = start_x
                    card.y = start_y + y_offset
                    card.draw(surface, start_x, start_y + y_offset)
                
                # Draw player name and stats
                name_text = FONT_MD.render(f"{player.name}", True, TEXT_COLOR)
                stats_text = FONT_SM.render(f"Books: {player.score} | Cards: {hand_size}", True, TEXT_COLOR)
                
                if i == 1:  # Left player
                    text_y = start_y - 40
                    text_x = start_x + CARD_WIDTH // 2 - name_text.get_width() // 2
                    surface.blit(name_text, (text_x, text_y))
                    surface.blit(stats_text, (text_x, text_y + 25))
                elif i == 2:  # Top player
                    text_y = start_y - 30
                    text_x = start_x + CARD_WIDTH // 2 - name_text.get_width() // 2
                    surface.blit(name_text, (text_x, text_y))
                elif i == 3:  # Right player
                    text_y = start_y - 40
                    text_x = start_x + CARD_WIDTH // 2 - name_text.get_width() // 2
                    surface.blit(name_text, (text_x, text_y))
                    surface.blit(stats_text, (text_x, text_y + 25))
                
                # Highlight current player
                if i == self.current_player_index:
                    pygame.draw.circle(surface, HIGHLIGHT_COLOR, 
                                     (start_x + CARD_WIDTH // 2, start_y - 10), 8)
        
        # Draw game messages
        if self.message and self.message_timer > 0:
            # Draw message box
            msg_surf = FONT_MD.render(self.message, True, TEXT_COLOR)
            msg_bg = pygame.Rect(SCREEN_WIDTH//2 - msg_surf.get_width()//2 - 20, 
                                SCREEN_HEIGHT//4 - 20, 
                                msg_surf.get_width() + 40, 
                                msg_surf.get_height() + 40)
            pygame.draw.rect(surface, UI_BG, msg_bg, border_radius=15)
            pygame.draw.rect(surface, UI_BORDER, msg_bg, 3, border_radius=15)
            
            # Draw message text
            surface.blit(msg_surf, (SCREEN_WIDTH//2 - msg_surf.get_width()//2, 
                                   SCREEN_HEIGHT//4))
        
        # Draw game state
        if self.game_state == "setup":
            # Draw start button
            start_btn = pygame.Rect(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 50, 200, 50)
            pygame.draw.rect(surface, BUTTON_COLOR, start_btn, border_radius=10)
            pygame.draw.rect(surface, UI_BORDER, start_btn, 3, border_radius=10)
            start_text = FONT_MD.render("Start Game", True, TEXT_COLOR)
            surface.blit(start_text, (SCREEN_WIDTH // 2 - start_text.get_width() // 2, 
                                    SCREEN_HEIGHT // 2 + 65))
        
        elif self.game_state == "playing" and not self.players[self.current_player_index].is_ai:
            # Draw UI for human player's turn
            # Draw target selection
            target_text = FONT_MD.render("Ask:", True, TEXT_COLOR)
            surface.blit(target_text, (50, SCREEN_HEIGHT - 180))
            
            # Draw target player buttons
            target_btns = []
            for i, player in enumerate(self.players[1:], 1):
                btn = pygame.Rect(50 + (i-1) * 150, SCREEN_HEIGHT - 180, 140, 40)
                target_btns.append((i, btn))
                
                # Highlight selected target
                if i == self.selected_target:
                    pygame.draw.rect(surface, BUTTON_HOVER, btn, border_radius=8)
                else:
                    pygame.draw.rect(surface, BUTTON_COLOR, btn, border_radius=8)
                    
                pygame.draw.rect(surface, UI_BORDER, btn, 2, border_radius=8)
                
                btn_text = FONT_SM.render(player.name, True, TEXT_COLOR)
                surface.blit(btn_text, (50 + (i-1) * 150 + 70 - btn_text.get_width()//2, 
                                       SCREEN_HEIGHT - 180 + 20 - btn_text.get_height()//2))
            
            # Draw rank selection
            rank_text = FONT_MD.render("For:", True, TEXT_COLOR)
            surface.blit(rank_text, (50, SCREEN_HEIGHT - 120))
            
            # Draw rank buttons
            rank_btns = []
            player_ranks = list(set(card.rank for card in self.players[0].hand))
            for i, rank in enumerate(player_ranks):
                btn = pygame.Rect(50 + i * 60, SCREEN_HEIGHT - 120, 55, 40)
                rank_btns.append((rank, btn))
                
                # Highlight selected rank
                if rank == self.selected_rank:
                    pygame.draw.rect(surface, BUTTON_HOVER, btn, border_radius=8)
                else:
                    pygame.draw.rect(surface, BUTTON_COLOR, btn, border_radius=8)
                    
                pygame.draw.rect(surface, UI_BORDER, btn, 2, border_radius=8)
                
                rank_name = RANK_NAMES[rank] if rank in RANK_NAMES else rank
                btn_text = FONT_SM.render(rank_name, True, TEXT_COLOR)
                surface.blit(btn_text, (50 + i * 60 + 27 - btn_text.get_width()//2, 
                                      SCREEN_HEIGHT - 120 + 20 - btn_text.get_height()//2))
            
            # Draw ask button
            ask_btn = pygame.Rect(SCREEN_WIDTH - 150, SCREEN_HEIGHT - 80, 120, 40)
            ask_enabled = self.selected_rank is not None
            
            if ask_enabled:
                pygame.draw.rect(surface, BUTTON_COLOR, ask_btn, border_radius=8)
            else:
                pygame.draw.rect(surface, (100, 100, 100), ask_btn, border_radius=8)
                
            pygame.draw.rect(surface, UI_BORDER, ask_btn, 2, border_radius=8)
            ask_text = FONT_SM.render("Ask", True, TEXT_COLOR)
            surface.blit(ask_text, (SCREEN_WIDTH - 150 + 60 - ask_text.get_width()//2, 
                                  SCREEN_HEIGHT - 80 + 20 - ask_text.get_height()//2))
        
        elif self.game_state == "game_over":
            # Draw winner announcement
            winner = max(self.players, key=lambda p: p.score)
            winner_text = FONT_LG.render(f"{winner.name} wins!", True, HIGHLIGHT_COLOR)
            surface.blit(winner_text, (SCREEN_WIDTH // 2 - winner_text.get_width() // 2, 
                                     SCREEN_HEIGHT // 3))
            
            # Draw scores
            scores_y = SCREEN_HEIGHT // 3 + 70
            for player in self.players:
                score_text = FONT_MD.render(f"{player.name}: {player.score} books", True, TEXT_COLOR)
                surface.blit(score_text, (SCREEN_WIDTH // 2 - score_text.get_width() // 2, 
                                        scores_y))
                scores_y += 40
            
            # Draw restart button
            restart_btn = pygame.Rect(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 100, 200, 50)
            pygame.draw.rect(surface, BUTTON_COLOR, restart_btn, border_radius=10)
            pygame.draw.rect(surface, UI_BORDER, restart_btn, 3, border_radius=10)
            restart_text = FONT_MD.render("Play Again", True, TEXT_COLOR)
            surface.blit(restart_text, (SCREEN_WIDTH // 2 - restart_text.get_width() // 2, 
                                      SCREEN_HEIGHT // 2 + 115))

# Main function
def main():
    clock = pygame.time.Clock()
    game = GoFishGame()
    
    # Main loop
    running = True
    while running:
        mouse_pos = pygame.mouse.get_pos()
        
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            
            # Handle clicks
            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                if game.game_state == "setup":
                    # Start game button
                    if SCREEN_WIDTH // 2 - 100 <= mouse_pos[0] <= SCREEN_WIDTH // 2 + 100 and \
                       SCREEN_HEIGHT // 2 + 50 <= mouse_pos[1] <= SCREEN_HEIGHT // 2 + 100:
                        game.start_game()
                
                elif game.game_state == "playing":
                    current_player = game.players[game.current_player_index]
                    if not current_player.is_ai:
                        # Handle target selection
                        for i in range(1, len(game.players)):
                            btn_x = 50 + (i-1) * 150
                            btn_y = SCREEN_HEIGHT - 180
                            if btn_x <= mouse_pos[0] <= btn_x + 140 and \
                               btn_y <= mouse_pos[1] <= btn_y + 40:
                                game.selected_target = i
                        
                        # Handle rank selection
                        player_ranks = list(set(card.rank for card in game.players[0].hand))
                        for i, rank in enumerate(player_ranks):
                            btn_x = 50 + i * 60
                            btn_y = SCREEN_HEIGHT - 120
                            if btn_x <= mouse_pos[0] <= btn_x + 55 and \
                               btn_y <= mouse_pos[1] <= btn_y + 40:
                                game.selected_rank = rank
                        
                        # Handle ask button
                        ask_btn_x, ask_btn_y = SCREEN_WIDTH - 150, SCREEN_HEIGHT - 80
                        if ask_btn_x <= mouse_pos[0] <= ask_btn_x + 120 and \
                           ask_btn_y <= mouse_pos[1] <= ask_btn_y + 40 and \
                           game.selected_rank is not None:
                            # Perform the turn
                            game.player_turn(game.selected_target, game.selected_rank)
                            game.selected_rank = None  # Reset selection
                
                elif game.game_state == "game_over":
                    # Restart game button
                    if SCREEN_WIDTH // 2 - 100 <= mouse_pos[0] <= SCREEN_WIDTH // 2 + 100 and \
                       SCREEN_HEIGHT // 2 + 100 <= mouse_pos[1] <= SCREEN_HEIGHT // 2 + 150:
                        game = GoFishGame()
        
        # Update game state
        game.update()
        
        # Drawing
        game.draw(screen)
        
        pygame.display.flip()
        clock.tick(60)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
