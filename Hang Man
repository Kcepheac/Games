import pygame
import random
import sys
import math

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Hangman Game")

# Colors
BACKGROUND = (25, 30, 40)
ACCENT = (70, 130, 180)
TEXT_COLOR = (220, 220, 240)
HIGHLIGHT = (255, 215, 0)
INCORRECT_COLOR = (220, 60, 60)
CORRECT_COLOR = (60, 180, 80)
KEY_COLOR = (50, 60, 80)
KEY_HOVER = (70, 90, 120)
KEY_USED = (100, 40, 40)
KEY_CORRECT = (40, 100, 40)
CATEGORY_COLOR = (80, 100, 150)

# Fonts
font_large = pygame.font.SysFont("Arial", 48, bold=True)
font_medium = pygame.font.SysFont("Arial", 36)
font_small = pygame.font.SysFont("Arial", 28)
font_tiny = pygame.font.SysFont("Arial", 20)

# Word categories
CATEGORIES = {
    "Animals": ["ELEPHANT", "GIRAFFE", "KANGAROO", "CHEETAH", "DOLPHIN", "PENGUIN", "CROCODILE", "FLAMINGO"],
    "Countries": ["AUSTRALIA", "BRAZIL", "CANADA", "JAPAN", "MEXICO", "ITALY", "EGYPT", "SWEDEN"],
    "Fruits": ["WATERMELON", "STRAWBERRY", "PINEAPPLE", "BLUEBERRY", "RASPBERRY", "MANGO", "POMEGRANATE", "AVOCADO"],
    "Sports": ["BASKETBALL", "FOOTBALL", "VOLLEYBALL", "BASEBALL", "TENNIS", "SWIMMING", "BOXING", "GYMNASTICS"],
    "Technology": ["COMPUTER", "KEYBOARD", "MONITOR", "PROGRAMMING", "ALGORITHM", "DATABASE", "NETWORK", "SECURITY"]
}

class HangmanGame:
    def __init__(self):
        self.reset_game()
        self.category = "Animals"
        self.selecting_category = False
        self.animation_progress = 0
        self.message = ""
        self.message_timer = 0
        
    def reset_game(self):
        self.word = ""
        self.guessed_letters = []
        self.incorrect_guesses = 0
        self.max_incorrect = 7
        self.game_state = "CATEGORY"  # CATEGORY, PLAYING, WIN, LOSE
        self.selecting_category = True
        self.category = ""
        self.animation_progress = 0
        self.message = "Select a category to start!"
        self.message_timer = 180
        
    def start_game(self, category):
        self.category = category
        self.word = random.choice(CATEGORIES[category])
        self.guessed_letters = []
        self.incorrect_guesses = 0
        self.game_state = "PLAYING"
        self.message = f"Category: {category}. Guess the word!"
        self.message_timer = 180
        
    def guess_letter(self, letter):
        if self.game_state != "PLAYING" or letter in self.guessed_letters:
            return
            
        self.guessed_letters.append(letter)
        
        if letter not in self.word:
            self.incorrect_guesses += 1
            self.message = f"'{letter}' is not in the word!"
            self.message_timer = 60
            
            if self.incorrect_guesses >= self.max_incorrect:
                self.game_state = "LOSE"
                self.message = f"Game over! The word was: {self.word}"
                self.message_timer = 300
        else:
            self.message = f"Correct! '{letter}' is in the word!"
            self.message_timer = 60
            
            if all(char in self.guessed_letters or char == " " for char in self.word):
                self.game_state = "WIN"
                self.message = "Congratulations! You guessed the word!"
                self.message_timer = 300
    
    def draw(self, screen):
        # Draw background
        screen.fill(BACKGROUND)
        
        # Draw title
        title = font_large.render("HANGMAN", True, ACCENT)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 20))
        
        # Draw hangman stand
        pygame.draw.line(screen, ACCENT, (100, 500), (300, 500), 8)  # Base
        pygame.draw.line(screen, ACCENT, (200, 500), (200, 100), 8)   # Pole
        pygame.draw.line(screen, ACCENT, (200, 100), (350, 100), 8)   # Top beam
        pygame.draw.line(screen, ACCENT, (350, 100), (350, 150), 8)   # Rope
        
        # Draw hangman based on incorrect guesses
        if self.incorrect_guesses > 0:  # Head
            pygame.draw.circle(screen, TEXT_COLOR, (350, 180), 30, 3)
        if self.incorrect_guesses > 1:  # Body
            pygame.draw.line(screen, TEXT_COLOR, (350, 210), (350, 320), 3)
        if self.incorrect_guesses > 2:  # Left arm
            pygame.draw.line(screen, TEXT_COLOR, (350, 240), (300, 270), 3)
        if self.incorrect_guesses > 3:  # Right arm
            pygame.draw.line(screen, TEXT_COLOR, (350, 240), (400, 270), 3)
        if self.incorrect_guesses > 4:  # Left leg
            pygame.draw.line(screen, TEXT_COLOR, (350, 320), (310, 380), 3)
        if self.incorrect_guesses > 5:  # Right leg
            pygame.draw.line(screen, TEXT_COLOR, (350, 320), (390, 380), 3)
        if self.incorrect_guesses > 6:  # Face
            # Sad face
            pygame.draw.arc(screen, TEXT_COLOR, (335, 170, 30, 20), 0, math.pi, 2)
            pygame.draw.circle(screen, TEXT_COLOR, (340, 175), 3)  # Left eye
            pygame.draw.circle(screen, TEXT_COLOR, (360, 175), 3)  # Right eye
        
        # Draw word display
        display_word = ""
        for char in self.word:
            if char in self.guessed_letters or self.game_state in ["WIN", "LOSE"]:
                display_word += char + " "
            else:
                display_word += "_ "
                
        word_text = font_large.render(display_word, True, TEXT_COLOR)
        screen.blit(word_text, (WIDTH // 2 - word_text.get_width() // 2, 150))
        
        # Draw message
        if self.message and self.message_timer > 0:
            message_text = font_medium.render(self.message, True, HIGHLIGHT)
            screen.blit(message_text, (WIDTH // 2 - message_text.get_width() // 2, 220))
            self.message_timer -= 1
            
        # Draw category selection
        if self.game_state == "CATEGORY":
            category_text = font_medium.render("Select a Category", True, ACCENT)
            screen.blit(category_text, (WIDTH // 2 - category_text.get_width() // 2, 280))
            
            # Draw category buttons
            categories = list(CATEGORIES.keys())
            for i, category in enumerate(categories):
                btn_rect = pygame.Rect(WIDTH//2 - 150, 340 + i*60, 300, 50)
                pygame.draw.rect(screen, CATEGORY_COLOR, btn_rect, border_radius=10)
                pygame.draw.rect(screen, ACCENT, btn_rect, 3, border_radius=10)
                
                category_label = font_small.render(category, True, TEXT_COLOR)
                screen.blit(category_label, (WIDTH//2 - category_label.get_width()//2, 
                                           340 + i*60 + 25 - category_label.get_height()//2))
        
        # Draw keyboard
        if self.game_state == "PLAYING":
            keyboard_layout = [
                "QWERTYUIOP",
                "ASDFGHJKL",
                "ZXCVBNM"
            ]
            
            for row_idx, row in enumerate(keyboard_layout):
                for col_idx, letter in enumerate(row):
                    x = 400 + col_idx * 40 - (len(row) * 20)
                    y = 300 + row_idx * 60
                    
                    # Determine key color
                    if letter in self.guessed_letters:
                        if letter in self.word:
                            key_color = KEY_CORRECT
                        else:
                            key_color = KEY_USED
                    else:
                        key_color = KEY_COLOR
                    
                    # Check if mouse is hovering over key
                    mouse_pos = pygame.mouse.get_pos()
                    key_rect = pygame.Rect(x-15, y-15, 30, 30)
                    if key_rect.collidepoint(mouse_pos) and letter not in self.guessed_letters:
                        key_color = KEY_HOVER
                    
                    # Draw key
                    pygame.draw.rect(screen, key_color, key_rect, border_radius=5)
                    pygame.draw.rect(screen, ACCENT, key_rect, 2, border_radius=5)
                    
                    # Draw letter
                    letter_text = font_small.render(letter, True, TEXT_COLOR)
                    screen.blit(letter_text, (x - letter_text.get_width()//2, 
                                            y - letter_text.get_height()//2))
        
        # Draw game state buttons
        if self.game_state in ["WIN", "LOSE"]:
            # Draw result message
            result_text = "You Win!" if self.game_state == "WIN" else "Game Over!"
            result_color = CORRECT_COLOR if self.game_state == "WIN" else INCORRECT_COLOR
            result = font_large.render(result_text, True, result_color)
            screen.blit(result, (WIDTH//2 - result.get_width()//2, 300))
            
            # Draw restart button
            restart_btn = pygame.Rect(WIDTH//2 - 100, 400, 200, 50)
            pygame.draw.rect(screen, KEY_COLOR, restart_btn, border_radius=10)
            pygame.draw.rect(screen, ACCENT, restart_btn, 3, border_radius=10)
            
            restart_text = font_medium.render("Play Again", True, TEXT_COLOR)
            screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, 
                                     400 + 25 - restart_text.get_height()//2))
            
            # Draw category button
            category_btn = pygame.Rect(WIDTH//2 - 100, 470, 200, 50)
            pygame.draw.rect(screen, CATEGORY_COLOR, category_btn, border_radius=10)
            pygame.draw.rect(screen, ACCENT, category_btn, 3, border_radius=10)
            
            category_text = font_medium.render("New Category", True, TEXT_COLOR)
            screen.blit(category_text, (WIDTH//2 - category_text.get_width()//2, 
                                     470 + 25 - category_text.get_height()//2))
        
        # Draw incorrect guesses
        if self.incorrect_guesses > 0:
            incorrect_text = font_small.render(f"Incorrect Guesses: {self.incorrect_guesses}/{self.max_incorrect}", 
                                             True, INCORRECT_COLOR)
            screen.blit(incorrect_text, (WIDTH - incorrect_text.get_width() - 20, 20))
        
        # Draw category
        if self.category:
            category_text = font_small.render(f"Category: {self.category}", True, CATEGORY_COLOR)
            screen.blit(category_text, (20, 20))

# Create game instance
game = HangmanGame()
clock = pygame.time.Clock()

# Main game loop
running = True
while running:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
        # Handle mouse clicks
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            
            # Category selection
            if game.game_state == "CATEGORY":
                categories = list(CATEGORIES.keys())
                for i, category in enumerate(categories):
                    btn_rect = pygame.Rect(WIDTH//2 - 150, 340 + i*60, 300, 50)
                    if btn_rect.collidepoint(mouse_pos):
                        game.start_game(category)
            
            # Keyboard input
            elif game.game_state == "PLAYING":
                keyboard_layout = [
                    "QWERTYUIOP",
                    "ASDFGHJKL",
                    "ZXCVBNM"
                ]
                
                for row_idx, row in enumerate(keyboard_layout):
                    for col_idx, letter in enumerate(row):
                        x = 400 + col_idx * 40 - (len(row) * 20)
                        y = 300 + row_idx * 60
                        key_rect = pygame.Rect(x-15, y-15, 30, 30)
                        
                        if key_rect.collidepoint(mouse_pos):
                            game.guess_letter(letter)
            
            # Game over buttons
            elif game.game_state in ["WIN", "LOSE"]:
                restart_btn = pygame.Rect(WIDTH//2 - 100, 400, 200, 50)
                category_btn = pygame.Rect(WIDTH//2 - 100, 470, 200, 50)
                
                if restart_btn.collidepoint(mouse_pos):
                    game.start_game(game.category)
                elif category_btn.collidepoint(mouse_pos):
                    game.reset_game()
    
    # Draw everything
    game.draw(screen)
    
    # Update display
    pygame.display.flip()
    
    # Control game speed
    clock.tick(60)

pygame.quit()
sys.exit()
