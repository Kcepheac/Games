import pygame
import sys
import random
import math
from typing import List, Tuple, Dict, Optional

# Initialize pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH, SCREEN_HEIGHT = 1000, 700
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Uno Card Game")

# Colors
BACKGROUND = (10, 50, 30)
UI_BG = (30, 70, 50, 200)
UI_BORDER = (70, 150, 100)
TEXT_COLOR = (220, 240, 220)
HIGHLIGHT_COLOR = (255, 255, 100)
BUTTON_COLOR = (50, 150, 100)
BUTTON_HOVER = (70, 180, 120)

# Card colors
CARD_COLORS = {
    "Red": (220, 60, 60),
    "Blue": (60, 120, 220),
    "Green": (60, 180, 80),
    "Yellow": (220, 200, 60),
    "Wild": (40, 40, 40)
}

# Fonts
FONT_SM = pygame.font.SysFont(None, 24)
FONT_MD = pygame.font.SysFont(None, 32)
FONT_LG = pygame.font.SysFont(None, 48)
FONT_XL = pygame.font.SysFont(None, 64)

# Card dimensions
CARD_WIDTH, CARD_HEIGHT = 80, 120
CARD_RADIUS = 8
CARD_SPACING = 20

class UnoCard:
    def __init__(self, color: str, value: str, special: bool = False):
        self.color = color
        self.value = value
        self.special = special
        self.face_up = True
        self.highlight = False
        self.x, self.y = 0, 0
        self.target_x, self.target_y = 0, 0
        self.animation_speed = 0.2
    
    def draw(self, surface, x: int, y: int, is_hand: bool = False):
        # Animate card movement
        if (self.x, self.y) != (self.target_x, self.target_y):
            dx = self.target_x - self.x
            dy = self.target_y - self.y
            self.x += dx * self.animation_speed
            self.y += dy * self.animation_speed
        else:
            self.x, self.y = x, y
        
        # Draw card background
        color = CARD_COLORS[self.color]
        if self.highlight and is_hand:
            highlight = tuple(min(c + 50, 255) for c in color)
            pygame.draw.rect(surface, highlight, (self.x, self.y, CARD_WIDTH, CARD_HEIGHT), 
                            border_radius=CARD_RADIUS)
        else:
            pygame.draw.rect(surface, color, (self.x, self.y, CARD_WIDTH, CARD_HEIGHT), 
                            border_radius=CARD_RADIUS)
        
        # Draw card border
        pygame.draw.rect(surface, (30, 30, 30), (self.x, self.y, CARD_WIDTH, CARD_HEIGHT), 
                         2, border_radius=CARD_RADIUS)
        
        # Draw card value
        if self.special:
            text_color = (255, 255, 255) if self.color == "Wild" else (30, 30, 30)
            text = FONT_MD.render(self.value, True, text_color)
            surface.blit(text, (self.x + CARD_WIDTH//2 - text.get_width()//2, 
                               self.y + CARD_HEIGHT//2 - text.get_height()//2))
        else:
            # Draw number in corners
            text_color = (30, 30, 30) if self.color != "Wild" else (255, 255, 255)
            text = FONT_MD.render(self.value, True, text_color)
            surface.blit(text, (self.x + 10, self.y + 10))
            surface.blit(text, (self.x + CARD_WIDTH - text.get_width() - 10, 
                               self.y + CARD_HEIGHT - text.get_height() - 10))
            
            # Draw center symbol
            symbol_size = 30
            if self.color == "Red":
                pygame.draw.circle(surface, (240, 240, 240), 
                                  (self.x + CARD_WIDTH//2, self.y + CARD_HEIGHT//2), 
                                  symbol_size//2)
            elif self.color == "Blue":
                pygame.draw.rect(surface, (240, 240, 240), 
                                (self.x + CARD_WIDTH//2 - symbol_size//2, 
                                 self.y + CARD_HEIGHT//2 - symbol_size//2, 
                                 symbol_size, symbol_size))
            elif self.color == "Green":
                points = [
                    (self.x + CARD_WIDTH//2, self.y + CARD_HEIGHT//2 - symbol_size//2),
                    (self.x + CARD_WIDTH//2 + symbol_size//2, self.y + CARD_HEIGHT//2 + symbol_size//2),
                    (self.x + CARD_WIDTH//2 - symbol_size//2, self.y + CARD_HEIGHT//2 + symbol_size//2)
                ]
                pygame.draw.polygon(surface, (240, 240, 240), points)
            elif self.color == "Yellow":
                pygame.draw.circle(surface, (240, 240, 240), 
                                  (self.x + CARD_WIDTH//2, self.y + CARD_HEIGHT//2), 
                                  symbol_size//2, 3)

class Player:
    def __init__(self, name: str, is_ai: bool = False):
        self.name = name
        self.is_ai = is_ai
        self.hand: List[UnoCard] = []
        self.has_uno = False
        self.wins = 0
    
    def draw_card(self, deck: List[UnoCard]) -> UnoCard:
        if deck:
            card = deck.pop()
            self.hand.append(card)
            return card
        return None
    
    def play_card(self, card_index: int, current_color: str, current_value: str) -> Optional[UnoCard]:
        if 0 <= card_index < len(self.hand):
            card = self.hand[card_index]
            if card.color == current_color or card.value == current_value or card.color == "Wild":
                return self.hand.pop(card_index)
        return None
    
    def ai_play(self, current_color: str, current_value: str) -> Optional[UnoCard]:
        # Try to play a matching card
        for i, card in enumerate(self.hand):
            if card.color == current_color or card.value == current_value:
                return self.hand.pop(i)
        
        # Try to play a wild card
        for i, card in enumerate(self.hand):
            if card.color == "Wild":
                return self.hand.pop(i)
        
        # No playable card
        return None

class UnoGame:
    def __init__(self):
        self.players: List[Player] = [
            Player("You", False),
            Player("AI 1", True),
            Player("AI 2", True),
            Player("AI 3", True)
        ]
        self.deck: List[UnoCard] = []
        self.discard_pile: List[UnoCard] = []
        self.current_player_index = 0
        self.direction = 1  # 1 for clockwise, -1 for counter-clockwise
        self.current_color = ""
        self.current_value = ""
        self.game_state = "setup"  # setup, playing, game_over
        self.winner = None
        self.message = ""
        self.message_timer = 0
        self.plus_two_stack = 0
        self.plus_four_stack = 0
        self.selected_color = "Red"
        self.initialize_deck()
        
    def initialize_deck(self):
        # Create standard cards
        colors = ["Red", "Blue", "Green", "Yellow"]
        numbers = [str(i) for i in range(10)] + ["+2", "Skip", "Reverse"]
        
        # Add number cards (0-9) - one zero per color, two of each other number
        for color in colors:
            self.deck.append(UnoCard(color, "0"))
            for number in numbers[1:]:
                self.deck.append(UnoCard(color, number))
                self.deck.append(UnoCard(color, number))
        
        # Add wild cards
        for _ in range(4):
            self.deck.append(UnoCard("Wild", "Wild", True))
            self.deck.append(UnoCard("Wild", "+4", True))
        
        self.shuffle_deck()
    
    def shuffle_deck(self):
        random.shuffle(self.deck)
    
    def start_game(self):
        # Deal initial cards
        for player in self.players:
            for _ in range(7):
                player.draw_card(self.deck)
        
        # Start with a non-special card
        while True:
            card = self.deck.pop()
            if not card.special and card.value not in ["+2", "+4", "Skip", "Reverse"]:
                self.discard_pile.append(card)
                self.current_color = card.color
                self.current_value = card.value
                break
            else:
                self.deck.insert(0, card)
        
        self.game_state = "playing"
        self.message = "Game started! Your turn."
        self.message_timer = 180
        
        # Position cards
        self.position_cards()
    
    def position_cards(self):
        # Position player cards
        player = self.players[0]
        hand_width = min(len(player.hand) * (CARD_WIDTH // 3), SCREEN_WIDTH - 200)
        start_x = (SCREEN_WIDTH - hand_width) // 2
        
        for i, card in enumerate(player.hand):
            card.target_x = start_x + i * (CARD_WIDTH // 3)
            card.target_y = SCREEN_HEIGHT - CARD_HEIGHT - 20
        
        # Position discard pile
        if self.discard_pile:
            top_card = self.discard_pile[-1]
            top_card.target_x = SCREEN_WIDTH // 2 - CARD_WIDTH // 2
            top_card.target_y = SCREEN_HEIGHT // 2 - CARD_HEIGHT // 2
    
    def next_player(self):
        self.current_player_index = (self.current_player_index + self.direction) % len(self.players)
        player = self.players[self.current_player_index]
        
        # Reset UNO status
        for p in self.players:
            p.has_uno = False
        
        # Check for UNO
        if len(player.hand) == 1:
            player.has_uno = True
            self.message = f"{player.name} has UNO!"
            self.message_timer = 120
    
    def play_turn(self, card_index: int = None):
        if self.game_state != "playing":
            return
        
        player = self.players[self.current_player_index]
        
        if player.is_ai:
            # AI turn
            card = player.ai_play(self.current_color, self.current_value)
            
            if card:
                self.play_card(card)
            else:
                # Draw a card
                drawn_card = player.draw_card(self.deck)
                self.message = f"{player.name} drew a card"
                self.message_timer = 90
                
                # Check if the drawn card can be played
                if drawn_card.color == self.current_color or drawn_card.value == self.current_value or drawn_card.color == "Wild":
                    if random.random() > 0.3:  # 70% chance to play the drawn card
                        player.hand.remove(drawn_card)
                        self.play_card(drawn_card)
                        return
            
            # Move to next player
            pygame.time.delay(1000)
            self.next_player()
        else:
            # Human turn
            if card_index is not None:
                card = player.play_card(card_index, self.current_color, self.current_value)
                if card:
                    self.play_card(card)
                    self.next_player()
                else:
                    self.message = "Invalid move!"
                    self.message_timer = 60
    
    def play_card(self, card: UnoCard):
        self.discard_pile.append(card)
        self.current_color = card.color
        self.current_value = card.value
        self.message = f"{self.players[self.current_player_index].name} played {card.color} {card.value}"
        self.message_timer = 90
        
        # Handle special cards
        if card.value == "Skip":
            self.next_player()
        elif card.value == "Reverse":
            self.direction *= -1
            # In 2-player game, reverse acts as skip
            if len(self.players) == 2:
                self.next_player()
        elif card.value == "+2":
            self.plus_two_stack += 2
        elif card.value == "+4":
            self.plus_four_stack += 4
        
        # Handle wild card color selection
        if card.color == "Wild":
            if self.players[self.current_player_index].is_ai:
                # AI chooses a random color (excluding Wild)
                colors = [c for c in CARD_COLORS.keys() if c != "Wild"]
                self.current_color = random.choice(colors)
            else:
                # Human will choose color on their turn
                pass
        
        # Apply card stacks
        next_player_index = (self.current_player_index + self.direction) % len(self.players)
        next_player = self.players[next_player_index]
        
        if self.plus_two_stack > 0:
            for _ in range(self.plus_two_stack):
                next_player.draw_card(self.deck)
            self.message = f"{next_player.name} draws {self.plus_two_stack} cards!"
            self.message_timer = 120
            self.plus_two_stack = 0
            self.next_player()  # Skip next player's turn
        
        if self.plus_four_stack > 0:
            for _ in range(self.plus_four_stack):
                next_player.draw_card(self.deck)
            self.message = f"{next_player.name} draws {self.plus_four_stack} cards!"
            self.message_timer = 120
            self.plus_four_stack = 0
            self.next_player()  # Skip next player's turn
        
        # Check for win
        if len(player.hand) == 0:
            self.game_state = "game_over"
            self.winner = player
            player.wins += 1
            self.message = f"{player.name} wins!"
    
    def draw_card_for_current(self):
        if self.game_state == "playing" and not self.players[self.current_player_index].is_ai:
            player = self.players[self.current_player_index]
            player.draw_card(self.deck)
            self.message = "You drew a card"
            self.message_timer = 60
            self.next_player()
    
    def call_uno(self):
        player = self.players[self.current_player_index]
        if len(player.hand) == 1 and not player.has_uno:
            player.has_uno = True
            self.message = "UNO called!"
            self.message_timer = 60
    
    def update(self):
        # Update message timer
        if self.message_timer > 0:
            self.message_timer -= 1
        
        # Position cards
        self.position_cards()
        
        # Handle AI turns
        if self.game_state == "playing" and self.players[self.current_player_index].is_ai:
            self.play_turn()
    
    def draw(self, surface):
        # Draw background
        surface.fill(BACKGROUND)
        
        # Draw game title
        title = FONT_XL.render("UNO", True, TEXT_COLOR)
        surface.blit(title, (SCREEN_WIDTH // 2 - title.get_width() // 2, 20))
        
        # Draw discard pile
        if self.discard_pile:
            top_card = self.discard_pile[-1]
            top_card.draw(surface, SCREEN_WIDTH // 2 - CARD_WIDTH // 2, 
                          SCREEN_HEIGHT // 2 - CARD_HEIGHT // 2)
        
        # Draw deck
        pygame.draw.rect(surface, (50, 80, 60), 
                        (SCREEN_WIDTH // 2 - CARD_WIDTH // 2 + 150, 
                         SCREEN_HEIGHT // 2 - CARD_HEIGHT // 2, 
                         CARD_WIDTH, CARD_HEIGHT), 
                        border_radius=CARD_RADIUS)
        deck_text = FONT_MD.render("DECK", True, TEXT_COLOR)
        surface.blit(deck_text, (SCREEN_WIDTH // 2 - deck_text.get_width() // 2 + 150, 
                               SCREEN_HEIGHT // 2 - deck_text.get_height() // 2))
        
        # Draw current color indicator
        pygame.draw.circle(surface, CARD_COLORS[self.current_color], 
                          (SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2), 25)
        
        # Draw player hands
        for i, player in enumerate(self.players):
            if i == 0:  # Human player
                for j, card in enumerate(player.hand):
                    card.highlight = False
                    if not player.is_ai:
                        # Highlight playable cards
                        if card.color == self.current_color or card.value == self.current_value or card.color == "Wild":
                            card.highlight = True
                        card.draw(surface, card.x, card.y, True)
            else:  # AI players
                # Draw card backs for AI players
                hand_size = len(player.hand)
                start_x = 100 if i == 1 else SCREEN_WIDTH - 100 - CARD_WIDTH
                start_y = 150 if i in [1, 3] else 50
                
                for j in range(hand_size):
                    offset = j * 10
                    y_offset = j * 3 if i in [1, 3] else -j * 3
                    
                    pygame.draw.rect(surface, (40, 40, 40), 
                                    (start_x, start_y + y_offset, CARD_WIDTH, CARD_HEIGHT), 
                                    border_radius=CARD_RADIUS)
                    pygame.draw.rect(surface, (100, 100, 100), 
                                    (start_x, start_y + y_offset, CARD_WIDTH, CARD_HEIGHT), 
                                    2, border_radius=CARD_RADIUS)
                    
                    # Draw player name and card count
                    name_text = FONT_MD.render(f"{player.name}: {hand_size} cards", True, TEXT_COLOR)
                    text_x = start_x + CARD_WIDTH // 2 - name_text.get_width() // 2
                    text_y = start_y + CARD_HEIGHT + 10
                    
                    if i == 1:  # Left player
                        text_y = start_y - 30
                    elif i == 3:  # Right player
                        text_y = start_y + CARD_HEIGHT + 10
                    elif i == 2:  # Top player
                        text_y = start_y + CARD_HEIGHT + 10
                    
                    surface.blit(name_text, (text_x, text_y))
                    
                    # Highlight current player
                    if i == self.current_player_index:
                        pygame.draw.circle(surface, HIGHLIGHT_COLOR, 
                                         (start_x + CARD_WIDTH // 2, text_y + 20), 8)
        
        # Draw game messages
        if self.message and self.message_timer > 0:
            msg_surf = FONT_LG.render(self.message, True, TEXT_COLOR)
            surface.blit(msg_surf, (SCREEN_WIDTH // 2 - msg_surf.get_width() // 2, 
                                   SCREEN_HEIGHT // 4))
        
        # Draw game state
        if self.game_state == "setup":
            start_btn = pygame.Rect(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 50, 200, 50)
            pygame.draw.rect(surface, BUTTON_COLOR, start_btn, border_radius=10)
            pygame.draw.rect(surface, UI_BORDER, start_btn, 3, border_radius=10)
            start_text = FONT_MD.render("Start Game", True, TEXT_COLOR)
            surface.blit(start_text, (SCREEN_WIDTH // 2 - start_text.get_width() // 2, 
                                    SCREEN_HEIGHT // 2 + 65))
        
        elif self.game_state == "game_over":
            # Draw winner announcement
            winner_text = FONT_LG.render(f"{self.winner.name} wins!", True, HIGHLIGHT_COLOR)
            surface.blit(winner_text, (SCREEN_WIDTH // 2 - winner_text.get_width() // 2, 
                                     SCREEN_HEIGHT // 3))
            
            # Draw restart button
            restart_btn = pygame.Rect(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 50, 200, 50)
            pygame.draw.rect(surface, BUTTON_COLOR, restart_btn, border_radius=10)
            pygame.draw.rect(surface, UI_BORDER, restart_btn, 3, border_radius=10)
            restart_text = FONT_MD.render("Play Again", True, TEXT_COLOR)
            surface.blit(restart_text, (SCREEN_WIDTH // 2 - restart_text.get_width() // 2, 
                                      SCREEN_HEIGHT // 2 + 65))
        
        # Draw action buttons for human player
        if self.game_state == "playing" and not self.players[self.current_player_index].is_ai:
            # Draw button
            draw_btn = pygame.Rect(SCREEN_WIDTH - 150, SCREEN_HEIGHT - 80, 120, 40)
            pygame.draw.rect(surface, BUTTON_COLOR, draw_btn, border_radius=8)
            pygame.draw.rect(surface, UI_BORDER, draw_btn, 2, border_radius=8)
            draw_text = FONT_SM.render("Draw Card", True, TEXT_COLOR)
            surface.blit(draw_text, (SCREEN_WIDTH - 150 + 60 - draw_text.get_width() // 2, 
                                   SCREEN_HEIGHT - 80 + 20 - draw_text.get_height() // 2))
            
            # UNO button
            uno_btn = pygame.Rect(SCREEN_WIDTH - 150, SCREEN_HEIGHT - 130, 120, 40)
            pygame.draw.rect(surface, BUTTON_COLOR, uno_btn, border_radius=8)
            pygame.draw.rect(surface, UI_BORDER, uno_btn, 2, border_radius=8)
            uno_text = FONT_SM.render("Call UNO", True, TEXT_COLOR)
            surface.blit(uno_text, (SCREEN_WIDTH - 150 + 60 - uno_text.get_width() // 2, 
                                  SCREEN_HEIGHT - 130 + 20 - uno_text.get_height() // 2))
            
            # Color selection for wild cards
            if any(card.color == "Wild" for card in self.players[0].hand):
                color_text = FONT_SM.render("Select color:", True, TEXT_COLOR)
                surface.blit(color_text, (50, SCREEN_HEIGHT - 160))
                
                color_btns = []
                colors = ["Red", "Yellow", "Green", "Blue"]
                for i, color in enumerate(colors):
                    btn = pygame.Rect(50 + i * 70, SCREEN_HEIGHT - 120, 60, 40)
                    color_btns.append((color, btn))
                    btn_color = BUTTON_HOVER if color == self.selected_color else BUTTON_COLOR
                    pygame.draw.rect(surface, CARD_COLORS[color], btn, border_radius=6)
                    pygame.draw.rect(surface, UI_BORDER, btn, 2, border_radius=6)
        
        # Draw player stats
        stats_y = 100
        for i, player in enumerate(self.players):
            stat_text = FONT_SM.render(f"{player.name}: {player.wins} wins", True, TEXT_COLOR)
            surface.blit(stat_text, (20 if i < 2 else SCREEN_WIDTH - stat_text.get_width() - 20, 
                                   stats_y))
            stats_y += 30 if i % 2 == 0 else -30
        
        # Draw current turn indicator
        turn_text = FONT_MD.render(f"Current turn: {self.players[self.current_player_index].name}", 
                                 True, HIGHLIGHT_COLOR)
        surface.blit(turn_text, (SCREEN_WIDTH // 2 - turn_text.get_width() // 2, 
                               SCREEN_HEIGHT - 180))
        
        # Draw direction indicator
        dir_text = FONT_SM.render(f"Direction: {'Clockwise' if self.direction == 1 else 'Counter-clockwise'}", 
                                 True, TEXT_COLOR)
        surface.blit(dir_text, (SCREEN_WIDTH // 2 - dir_text.get_width() // 2, 
                              SCREEN_HEIGHT - 150))

# Button class for UI
class Button:
    def __init__(self, x, y, width, height, text):
        self.rect = pygame.Rect(x, y, width, height)
        self.text = text
        self.color = BUTTON_COLOR
        self.hover_color = BUTTON_HOVER
        self.text_color = TEXT_COLOR
        self.font = FONT_MD
        self.hovered = False
        
    def draw(self, surface):
        color = self.hover_color if self.hovered else self.color
        pygame.draw.rect(surface, color, self.rect, border_radius=12)
        pygame.draw.rect(surface, UI_BORDER, self.rect, 3, border_radius=12)
        
        text_surf = self.font.render(self.text, True, self.text_color)
        text_rect = text_surf.get_rect(center=self.rect.center)
        surface.blit(text_surf, text_rect)
        
    def check_hover(self, pos):
        self.hovered = self.rect.collidepoint(pos)
        
    def is_clicked(self, pos, event):
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            return self.rect.collidepoint(pos)
        return False

# Main function
def main():
    clock = pygame.time.Clock()
    game = UnoGame()
    
    # Create UI buttons
    buttons = [
        Button(SCREEN_WIDTH - 150, SCREEN_HEIGHT - 80, 120, 40, "Draw"),
        Button(SCREEN_WIDTH - 150, SCREEN_HEIGHT - 130, 120, 40, "UNO")
    ]
    
    # Color selection buttons
    color_buttons = []
    colors = ["Red", "Yellow", "Green", "Blue"]
    for i, color in enumerate(colors):
        btn = Button(50 + i * 70, SCREEN_HEIGHT - 120, 60, 40, "")
        btn.color = CARD_COLORS[color]
        btn.hover_color = tuple(min(c + 30, 255) for c in btn.color)
        color_buttons.append((color, btn))
    
    # Main loop
    running = True
    while running:
        mouse_pos = pygame.mouse.get_pos()
        
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            
            # Handle card clicks
            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                if game.game_state == "setup":
                    # Start game button
                    if SCREEN_WIDTH // 2 - 100 <= mouse_pos[0] <= SCREEN_WIDTH // 2 + 100 and \
                       SCREEN_HEIGHT // 2 + 50 <= mouse_pos[1] <= SCREEN_HEIGHT // 2 + 100:
                        game.start_game()
                
                elif game.game_state == "game_over":
                    # Restart game button
                    if SCREEN_WIDTH // 2 - 100 <= mouse_pos[0] <= SCREEN_WIDTH // 2 + 100 and \
                       SCREEN_HEIGHT // 2 + 50 <= mouse_pos[1] <= SCREEN_HEIGHT // 2 + 100:
                        game = UnoGame()
                
                elif game.game_state == "playing":
                    player = game.players[0]
                    if not player.is_ai:
                        # Check if a card was clicked
                        for i, card in enumerate(player.hand):
                            card_rect = pygame.Rect(card.target_x, card.target_y, CARD_WIDTH, CARD_HEIGHT)
                            if card_rect.collidepoint(mouse_pos):
                                game.play_turn(i)
                                break
                        
                        # Draw card button
                        if SCREEN_WIDTH - 150 <= mouse_pos[0] <= SCREEN_WIDTH - 30 and \
                           SCREEN_HEIGHT - 80 <= mouse_pos[1] <= SCREEN_HEIGHT - 40:
                            game.draw_card_for_current()
                        
                        # UNO button
                        if SCREEN_WIDTH - 150 <= mouse_pos[0] <= SCREEN_WIDTH - 30 and \
                           SCREEN_HEIGHT - 130 <= mouse_pos[1] <= SCREEN_HEIGHT - 90:
                            game.call_uno()
                        
                        # Color selection buttons
                        for color, btn in color_buttons:
                            if btn.rect.collidepoint(mouse_pos):
                                game.selected_color = color
                                if game.current_color == "Wild":  # Only set if we just played a wild
                                    game.current_color = color
        
        # Update game state
        game.update()
        
        # Drawing
        game.draw(screen)
        
        pygame.display.flip()
        clock.tick(60)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
